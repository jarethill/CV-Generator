{"version":3,"sources":["components/Header.js","components/GeneralInformation.js","components/EducationForm.js","components/Education.js","components/ExperienceForm.js","components/Experience.js","components/App.js","index.js"],"names":["Header","Navbar","bg","variant","expand","className","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","GeneralInformation","props","toggleEditMode","bind","STATES","AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY","COL","state","editMode","this","setState","prevState","info","updateState","rootName","firstName","lastName","addressOne","addressTwo","city","zip","Container","as","style","maxWidth","Form","onSubmit","e","preventDefault","Row","Group","controlId","width","Label","Control","type","placeholder","value","onChange","target","Object","keys","map","st","key","Button","onMouseDown","Component","EducationForm","updateSchool","schoolsArray","schoolIndex","propertyName","updatedSchools","schools","modifySchool","schoolName","schoolTitle","dateFrom","dateTo","length","Education","method","emptySchool","reduce","accum","current","push","splice","numberOfSchools","icon","faPlusCircle","fontSize","marginBottom","cursor","school","index","Fragment","ExperienceForm","updateCompany","modifyTask","companiesArray","companyIndex","updatedCompanies","companies","taskIndex","updatedTasks","jobTasks","modifyCompany","companyName","positionTitle","minusCircleStyle","position","right","top","task","updateCompanyTasks","faMinusCircle","marginLeft","Experience","emptyCompany","Array","isArray","numberOfCompanies","company","App","general","education","experience","property","data","setTimeout","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cef6e615.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/NavBar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <Navbar bg='primary' variant='dark' expand='sm' className='justify-content-between w-100'>\r\n                <Navbar.Brand href='#home'>CV Generator</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n                <Navbar.Collapse id='basic-navbar-nav'>\r\n                    <Nav className='ml-auto'>\r\n                        <Nav.Link href='#general'>General</Nav.Link>\r\n                        <Nav.Link href='#education'>Education</Nav.Link>\r\n                        <Nav.Link href='#experience'>Experience</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass GeneralInformation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleEditMode = this.toggleEditMode.bind(this);\r\n\r\n        this.STATES = {\r\n            AL: 'Alabama',\r\n            AK: 'Alaska',\r\n            AZ: 'Arizona',\r\n            AR: 'Arkansas',\r\n            CA: 'California',\r\n            CO: 'Colorado',\r\n            CT: 'Connecticut',\r\n            DE: 'Delaware',\r\n            FL: 'Florida',\r\n            GA: 'Georgia',\r\n            HI: 'Hawaii',\r\n            ID: 'Idaho',\r\n            IL: 'Illinois',\r\n            IN: 'Indiana',\r\n            IA: 'Iowa',\r\n            KS: 'Kansas',\r\n            KY: 'Kentucky',\r\n            LA: 'Louisiana',\r\n            ME: 'Maine',\r\n            MD: 'Maryland',\r\n            MA: 'Massachusetts',\r\n            MI: 'Michigan',\r\n            MN: 'Minnesota',\r\n            MS: 'Mississippi',\r\n            MO: 'Missouri',\r\n            MT: 'Montana',\r\n            NE: 'Nebraska',\r\n            NV: 'Nevada',\r\n            NH: 'New Hampshire',\r\n            NJ: 'New Jersey',\r\n            NM: 'New Mexico',\r\n            NY: 'New York',\r\n            NC: 'North Carolina',\r\n            ND: 'North Dakota',\r\n            OH: 'Ohio',\r\n            OK: 'Oklahoma',\r\n            OR: 'Oregon',\r\n            PA: 'Pennsylvania',\r\n            RI: 'Rhode Island',\r\n            SC: 'South Carolina',\r\n            SD: 'South Dakota',\r\n            TN: 'Tennessee',\r\n            TX: 'Texas',\r\n            UT: 'Utah',\r\n            VT: 'Vermont',\r\n            VA: 'Virginia',\r\n            WA: 'Washington',\r\n            WV: 'West Virginia',\r\n            WI: 'Wisconsin',\r\n            WY: 'Wyoming',\r\n        };\r\n        this.COL = 'div';\r\n\r\n        this.state = {\r\n            editMode: true,\r\n        };\r\n    }\r\n\r\n    toggleEditMode() {\r\n        this.setState((prevState) => ({\r\n            editMode: !prevState.editMode,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { editMode } = this.state;\r\n        const { info, updateState, rootName } = this.props;\r\n        const { firstName, lastName, addressOne, addressTwo, city, state, zip } = info;\r\n\r\n        return (\r\n            <Container id='general' className='mt-5' as='section' style={{ maxWidth: '650px' }}>\r\n                <h2 className='text-center'>General Information</h2>\r\n\r\n                <Form className='mt-4' onSubmit={(e) => e.preventDefault()}>\r\n                    <Form.Row className='justify-content-between w-100 mr-0 ml-0'>\r\n                        <Form.Group as={this.COL} controlId='formGridFirstName' style={{ width: '48%' }}>\r\n                            <Form.Label className='font-weight-bold'>First Name</Form.Label>\r\n                            {editMode ? (\r\n                                <Form.Control\r\n                                    type='text'\r\n                                    placeholder='Enter first name'\r\n                                    value={firstName}\r\n                                    onChange={(e) =>\r\n                                        updateState(rootName, { ...this.props.info, firstName: e.target.value })\r\n                                    }\r\n                                />\r\n                            ) : (\r\n                                <p>{firstName}</p>\r\n                            )}\r\n                        </Form.Group>\r\n                        <Form.Group as={this.COL} controlId='formGridLastName' style={{ width: '48%' }}>\r\n                            <Form.Label className='font-weight-bold'>Last Name</Form.Label>\r\n                            {editMode ? (\r\n                                <Form.Control\r\n                                    type='text'\r\n                                    placeholder='Enter last name'\r\n                                    value={lastName}\r\n                                    onChange={(e) =>\r\n                                        updateState(rootName, { ...this.props.info, lastName: e.target.value })\r\n                                    }\r\n                                />\r\n                            ) : (\r\n                                <p>{lastName}</p>\r\n                            )}\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group controlId='formGridAddress1'>\r\n                        <Form.Label className='font-weight-bold'>Address</Form.Label>\r\n                        {editMode ? (\r\n                            <Form.Control\r\n                                placeholder='1234 Main St'\r\n                                value={addressOne}\r\n                                onChange={(e) =>\r\n                                    updateState(rootName, { ...this.props.info, addressOne: e.target.value })\r\n                                }\r\n                            />\r\n                        ) : (\r\n                            <p>{addressOne}</p>\r\n                        )}\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='formGridAddress2'>\r\n                        <Form.Label className='font-weight-bold'>Address 2</Form.Label>\r\n                        {editMode ? (\r\n                            <Form.Control\r\n                                placeholder='Apartment, studio, or floor'\r\n                                value={addressTwo}\r\n                                onChange={(e) =>\r\n                                    updateState(rootName, { ...this.props.info, addressTwo: e.target.value })\r\n                                }\r\n                            />\r\n                        ) : (\r\n                            <p>{addressTwo}</p>\r\n                        )}\r\n                    </Form.Group>\r\n\r\n                    <Form.Row className='justify-content-between w-100 mr-0 ml-0'>\r\n                        <Form.Group as={this.COL} controlId='formGridCity' style={{ width: '65%' }}>\r\n                            <Form.Label className='font-weight-bold'>City</Form.Label>\r\n                            {editMode ? (\r\n                                <Form.Control\r\n                                    value={city}\r\n                                    placeholder='Enter city'\r\n                                    onChange={(e) =>\r\n                                        updateState(rootName, { ...this.props.info, city: e.target.value })\r\n                                    }\r\n                                />\r\n                            ) : (\r\n                                <p>{city}</p>\r\n                            )}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={this.COL} controlId='formGridState'>\r\n                            <Form.Label className='font-weight-bold'>State</Form.Label>\r\n                            {editMode ? (\r\n                                <Form.Control\r\n                                    as='select'\r\n                                    value={state}\r\n                                    onChange={(e) =>\r\n                                        updateState(rootName, { ...this.props.info, state: e.target.value })\r\n                                    }\r\n                                >\r\n                                    {Object.keys(this.STATES).map((st) => {\r\n                                        return <option key={st}>{st}</option>;\r\n                                    })}\r\n                                </Form.Control>\r\n                            ) : (\r\n                                <p>{state}</p>\r\n                            )}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={this.COL} controlId='formGridZip'>\r\n                            <Form.Label className='font-weight-bold'>Zip</Form.Label>\r\n                            {editMode ? (\r\n                                <Form.Control\r\n                                    value={zip}\r\n                                    placeholder='Enter zip'\r\n                                    onChange={(e) => updateState(rootName, { ...this.props.info, zip: e.target.value })}\r\n                                />\r\n                            ) : (\r\n                                <p>{zip}</p>\r\n                            )}\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Button variant={editMode ? 'info' : 'secondary'} onMouseDown={() => this.toggleEditMode()}>\r\n                        {editMode ? 'Submit' : 'Edit'}\r\n                    </Button>\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GeneralInformation;\r\n","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/button';\r\n\r\nexport default class EducationForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.updateSchool = this.updateSchool.bind(this);\r\n\r\n        this.state = {\r\n            editMode: true,\r\n        };\r\n    }\r\n\r\n    updateSchool(schoolsArray, schoolIndex, propertyName, value) {\r\n        const updatedSchools = [...schoolsArray];\r\n        const { updateState, rootName } = this.props;\r\n\r\n        updatedSchools[schoolIndex] = {\r\n            ...updatedSchools[schoolIndex],\r\n            [propertyName]: value,\r\n        };\r\n\r\n        updateState(rootName, {\r\n            schools: updatedSchools,\r\n        });\r\n    }\r\n\r\n    toggleEditMode() {\r\n        this.setState((prevState) => ({\r\n            editMode: !prevState.editMode,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { editMode } = this.state;\r\n        const { schools, schoolIndex, modifySchool } = this.props;\r\n        const { schoolName, schoolTitle, dateFrom, dateTo } = schools[schoolIndex];\r\n\r\n        return (\r\n            <Form className='mt-4' onSubmit={(e) => e.preventDefault()}>\r\n                <Form.Group controlId='formBasicSchool'>\r\n                    <Form.Label className='font-weight-bold'>School Name</Form.Label>\r\n                    {editMode ? (\r\n                        <Form.Control\r\n                            type='text'\r\n                            placeholder='Enter school name'\r\n                            value={schoolName}\r\n                            onChange={(e) => {\r\n                                this.updateSchool(schools, schoolIndex, 'schoolName', e.target.value);\r\n                            }}\r\n                        />\r\n                    ) : (\r\n                        <p>{schoolName}</p>\r\n                    )}\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='formBasicTitle'>\r\n                    <Form.Label className='font-weight-bold'>Study Title</Form.Label>\r\n                    {editMode ? (\r\n                        <Form.Control\r\n                            type='text'\r\n                            placeholder='Enter title'\r\n                            value={schoolTitle}\r\n                            onChange={(e) => {\r\n                                this.updateSchool(schools, schoolIndex, 'schoolTitle', e.target.value);\r\n                            }}\r\n                        />\r\n                    ) : (\r\n                        <p>{schoolTitle}</p>\r\n                    )}\r\n                </Form.Group>\r\n\r\n                <Form.Row className='justify-content-between w-100 mr-0 ml-0'>\r\n                    <Form.Group controlId='formBasicDate'>\r\n                        <Form.Label className='font-weight-bold'>Date of Study</Form.Label>\r\n                        {editMode ? (\r\n                            <Form.Control\r\n                                type='date'\r\n                                value={dateFrom}\r\n                                onChange={(e) => {\r\n                                    this.updateSchool(schools, schoolIndex, 'dateFrom', e.target.value);\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                            <p>{dateFrom}</p>\r\n                        )}\r\n                    </Form.Group>\r\n                    <Form.Group controlId='formBasicDate2'>\r\n                        <Form.Label className='font-weight-bold'>To</Form.Label>\r\n                        {editMode ? (\r\n                            <Form.Control\r\n                                type='date'\r\n                                value={dateTo}\r\n                                onChange={(e) => {\r\n                                    this.updateSchool(schools, schoolIndex, 'dateTo', e.target.value);\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                            <p>{dateTo}</p>\r\n                        )}\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row className='justify-content-between w-100 mr-0 ml-0'>\r\n                    <Button variant={editMode ? 'info' : 'secondary'} onMouseDown={() => this.toggleEditMode()}>\r\n                        {editMode ? 'Submit' : 'Edit'}\r\n                    </Button>\r\n                    {schools.length > 1 && (\r\n                        <Button variant='danger' onMouseDown={() => modifySchool(schools, 'remove', schoolIndex)}>\r\n                            Delete\r\n                        </Button>\r\n                    )}\r\n                </Form.Row>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport EducationForm from './EducationForm';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Education extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.modifySchool = this.modifySchool.bind(this);\r\n    }\r\n    modifySchool(schoolsArray, method = 'add', schoolIndex = null) {\r\n        const { updateState, rootName } = this.props;\r\n        const updatedSchools = [...schoolsArray];\r\n\r\n        if (method === 'add') {\r\n            // Return an object with all the school fields set to an empty string\r\n            const emptySchool = Object.keys(updatedSchools[0]).reduce((accum, current) => {\r\n                return {\r\n                    ...accum,\r\n                    [current]: '',\r\n                };\r\n            }, {});\r\n\r\n            updatedSchools.push(emptySchool);\r\n        } else if (method === 'remove' && updatedSchools.length > 1 && schoolIndex >= 0) {\r\n            updatedSchools.splice(schoolIndex, 1);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        updateState(rootName, {\r\n            schools: updatedSchools,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { schools } = this.props.info;\r\n        const numberOfSchools = schools.length;\r\n\r\n        const { updateState, rootName } = this.props;\r\n\r\n        const plusCircleStyle = { fontSize: '1.25rem', marginBottom: '.18em', cursor: 'pointer' };\r\n\r\n        return (\r\n            <Container id='education' className='mt-5' as='section' style={{ maxWidth: '650px' }}>\r\n                <h2 className='text-center'>\r\n                    Education{' '}\r\n                    <FontAwesomeIcon\r\n                        icon={faPlusCircle}\r\n                        style={plusCircleStyle}\r\n                        onMouseDown={() => this.modifySchool(schools, 'add')}\r\n                    />\r\n                </h2>\r\n\r\n                {schools.map((school, index) => {\r\n                    if (index === numberOfSchools - 1) {\r\n                        // If this is the last school, no divider is added below\r\n                        return (\r\n                            <EducationForm\r\n                                key={index}\r\n                                schools={schools}\r\n                                schoolIndex={index}\r\n                                updateState={updateState}\r\n                                modifySchool={this.modifySchool}\r\n                                rootName={rootName}\r\n                            />\r\n                        );\r\n                    }\r\n\r\n                    return (\r\n                        <React.Fragment key={index}>\r\n                            <EducationForm\r\n                                schools={schools}\r\n                                schoolIndex={index}\r\n                                updateState={updateState}\r\n                                modifySchool={this.modifySchool}\r\n                                rootName={rootName}\r\n                            />\r\n                            <div className='divider mt-4'></div>\r\n                        </React.Fragment>\r\n                    );\r\n                })}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Education;\r\n","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/button';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle, faMinusCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass ExperienceForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.updateCompany = this.updateCompany.bind(this);\r\n        this.modifyTask = this.modifyTask.bind(this);\r\n        this.toggleEditMode = this.toggleEditMode.bind(this);\r\n\r\n        this.state = {\r\n            editMode: true,\r\n        };\r\n    }\r\n\r\n    updateCompany(companiesArray, companyIndex, propertyName, value) {\r\n        const updatedCompanies = [...companiesArray];\r\n        const { updateState, rootName } = this.props;\r\n\r\n        updatedCompanies[companyIndex] = {\r\n            ...updatedCompanies[companyIndex],\r\n            [propertyName]: value,\r\n        };\r\n\r\n        updateState(rootName, {\r\n            companies: updatedCompanies,\r\n        });\r\n    }\r\n\r\n    updateCompanyTasks(companiesArray, companyIndex, taskIndex, value) {\r\n        const updatedCompanies = [...companiesArray];\r\n        const updatedTasks = [...updatedCompanies[companyIndex].jobTasks];\r\n        const { updateState, rootName } = this.props;\r\n\r\n        updatedTasks[taskIndex] = value;\r\n\r\n        updatedCompanies[companyIndex] = {\r\n            ...updatedCompanies[companyIndex],\r\n            jobTasks: updatedTasks,\r\n        };\r\n\r\n        updateState(rootName, {\r\n            companies: updatedCompanies,\r\n        });\r\n    }\r\n\r\n    modifyTask(companiesArray, companyIndex, method = 'add', taskIndex = null) {\r\n        const updatedCompanies = [...companiesArray];\r\n        const updatedTasks = [...updatedCompanies[companyIndex].jobTasks];\r\n        const { updateState, rootName } = this.props;\r\n\r\n        if (method === 'add') {\r\n            updatedTasks.push('');\r\n        } else if (method === 'remove' && updatedTasks.length > 1 && taskIndex >= 0) {\r\n            updatedTasks.splice(taskIndex, 1);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        updatedCompanies[companyIndex] = {\r\n            ...updatedCompanies[companyIndex],\r\n            jobTasks: updatedTasks,\r\n        };\r\n\r\n        updateState(rootName, {\r\n            companies: updatedCompanies,\r\n        });\r\n    }\r\n\r\n    toggleEditMode() {\r\n        this.setState((prevState) => ({\r\n            editMode: !prevState.editMode,\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { editMode } = this.state;\r\n        const { companies, companyIndex, modifyCompany } = this.props;\r\n        const { companyName, positionTitle, jobTasks, dateFrom, dateTo } = companies[companyIndex];\r\n\r\n        const minusCircleStyle = { cursor: 'pointer', position: 'absolute', right: '.75em', top: '.75em' };\r\n\r\n        return (\r\n            <Form className='mt-4 mb-4' onSubmit={(e) => e.preventDefault()}>\r\n                <Form.Group controlId='formBasicCompany'>\r\n                    <Form.Label className='font-weight-bold'>Company Name</Form.Label>\r\n                    {editMode ? (\r\n                        <Form.Control\r\n                            type='text'\r\n                            placeholder='Enter company name'\r\n                            value={companyName}\r\n                            onChange={(e) => this.updateCompany(companies, companyIndex, 'companyName', e.target.value)}\r\n                        />\r\n                    ) : (\r\n                        <p>{companyName}</p>\r\n                    )}\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='formBasicPositionTitle'>\r\n                    <Form.Label className='font-weight-bold'>Position Title</Form.Label>\r\n                    {editMode ? (\r\n                        <Form.Control\r\n                            type='text'\r\n                            placeholder='Enter title'\r\n                            value={positionTitle}\r\n                            onChange={(e) =>\r\n                                this.updateCompany(companies, companyIndex, 'positionTitle', e.target.value)\r\n                            }\r\n                        />\r\n                    ) : (\r\n                        <p>{positionTitle}</p>\r\n                    )}\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='formBasicTasks'>\r\n                    <Form.Label className='font-weight-bold'>\r\n                        Main Tasks of Job{' '}\r\n                        {editMode && (\r\n                            <FontAwesomeIcon\r\n                                icon={faPlusCircle}\r\n                                style={{ cursor: 'pointer' }}\r\n                                onMouseDown={() => this.modifyTask(companies, companyIndex, 'add')}\r\n                            />\r\n                        )}\r\n                    </Form.Label>\r\n                    {!editMode ? (\r\n                        <ul>\r\n                            {jobTasks.map((task, index) => (\r\n                                <li key={index} style={{ marginLeft: '1.25em' }}>\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <p>{task}</p>\r\n                                        {jobTasks.length > 1 && (\r\n                                            // Render delete button only if there's more than 1 task\r\n                                            <FontAwesomeIcon\r\n                                                icon={faMinusCircle}\r\n                                                style={minusCircleStyle}\r\n                                                onMouseDown={() =>\r\n                                                    this.modifyTask(companies, companyIndex, 'remove', index)\r\n                                                }\r\n                                            />\r\n                                        )}\r\n                                    </div>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    ) : (\r\n                        jobTasks.map((task, index) => (\r\n                            <div key={index} style={{ position: 'relative' }}>\r\n                                <Form.Control\r\n                                    type='text'\r\n                                    placeholder='Enter task'\r\n                                    className='mt-2'\r\n                                    value={task}\r\n                                    onChange={(e) =>\r\n                                        this.updateCompanyTasks(companies, companyIndex, index, e.target.value)\r\n                                    }\r\n                                />\r\n\r\n                                {jobTasks.length > 1 && (\r\n                                    // Render delete button only if there's more than 1 task\r\n                                    <FontAwesomeIcon\r\n                                        icon={faMinusCircle}\r\n                                        style={minusCircleStyle}\r\n                                        onMouseDown={() => this.modifyTask(companies, companyIndex, 'remove', index)}\r\n                                    />\r\n                                )}\r\n                            </div>\r\n                        ))\r\n                    )}\r\n                </Form.Group>\r\n\r\n                <Form.Row className='justify-content-between w-100 mr-0 ml-0'>\r\n                    <Form.Group controlId='formBasicDate'>\r\n                        <Form.Label className='font-weight-bold'>Date of Employment</Form.Label>\r\n                        {editMode ? (\r\n                            <Form.Control\r\n                                type='date'\r\n                                value={dateFrom}\r\n                                onChange={(e) =>\r\n                                    this.updateCompany(companies, companyIndex, 'dateFrom', e.target.value)\r\n                                }\r\n                            />\r\n                        ) : (\r\n                            <p>{dateFrom}</p>\r\n                        )}\r\n                    </Form.Group>\r\n                    <Form.Group controlId='formBasicDate2'>\r\n                        <Form.Label className='font-weight-bold'>To</Form.Label>\r\n\r\n                        {editMode ? (\r\n                            <Form.Control\r\n                                type='date'\r\n                                value={dateTo}\r\n                                onChange={(e) => this.updateCompany(companies, companyIndex, 'dateTo', e.target.value)}\r\n                            />\r\n                        ) : (\r\n                            <p>{dateTo}</p>\r\n                        )}\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row className='justify-content-between w-100 mr-0 ml-0'>\r\n                    <Button variant={editMode ? 'info' : 'secondary'} onMouseDown={() => this.toggleEditMode()}>\r\n                        {editMode ? 'Submit' : 'Edit'}\r\n                    </Button>\r\n                    {companies.length > 1 && (\r\n                        <Button variant='danger' onMouseDown={() => modifyCompany(companies, 'remove', companyIndex)}>\r\n                            Delete\r\n                        </Button>\r\n                    )}\r\n                </Form.Row>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExperienceForm;\r\n","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ExperienceForm from './ExperienceForm';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Experience extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.modifyCompany = this.modifyCompany.bind(this);\r\n    }\r\n\r\n    modifyCompany(companiesArray, method = 'add', companyIndex = null) {\r\n        const updatedCompanies = [...companiesArray];\r\n        const { updateState, rootName } = this.props;\r\n\r\n        if (method === 'add') {\r\n            // Return an object with all the company fields set to an empty string or array for job tasks\r\n            const emptyCompany = Object.keys(updatedCompanies[0]).reduce((accum, current) => {\r\n                if (Array.isArray(updatedCompanies[0][current])) {\r\n                    return {\r\n                        ...accum,\r\n                        [current]: [''],\r\n                    };\r\n                } else {\r\n                    return {\r\n                        ...accum,\r\n                        [current]: '',\r\n                    };\r\n                }\r\n            }, {});\r\n\r\n            updatedCompanies.push(emptyCompany);\r\n        } else if (method === 'remove' && companiesArray.length > 1 && companyIndex >= 0) {\r\n            updatedCompanies.splice(companyIndex, 1);\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        updateState(rootName, {\r\n            companies: updatedCompanies,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { companies } = this.props.info;\r\n        const numberOfCompanies = companies.length;\r\n\r\n        const { updateState, rootName } = this.props;\r\n        const plusCircleStyle = { fontSize: '1.25rem', marginBottom: '.18em', cursor: 'pointer' };\r\n\r\n        return (\r\n            <Container id='experience' className='mt-5' as='section' style={{ maxWidth: '650px' }}>\r\n                <h2 className='text-center'>\r\n                    Experience{' '}\r\n                    <FontAwesomeIcon\r\n                        icon={faPlusCircle}\r\n                        style={plusCircleStyle}\r\n                        onMouseDown={() => this.modifyCompany(companies, 'add')}\r\n                    />\r\n                </h2>\r\n\r\n                {companies.map((company, index) => {\r\n                    if (index === numberOfCompanies - 1) {\r\n                        // If this is the last company, no divider is added below\r\n                        return (\r\n                            <ExperienceForm\r\n                                key={index}\r\n                                companies={companies}\r\n                                companyIndex={index}\r\n                                updateState={updateState}\r\n                                modifyCompany={this.modifyCompany}\r\n                                rootName={rootName}\r\n                            />\r\n                        );\r\n                    }\r\n\r\n                    return (\r\n                        <React.Fragment key={index}>\r\n                            <ExperienceForm\r\n                                companies={companies}\r\n                                companyIndex={index}\r\n                                updateState={updateState}\r\n                                modifyCompany={this.modifyCompany}\r\n                                rootName={rootName}\r\n                            />\r\n                            <div className='divider mt-4'></div>\r\n                        </React.Fragment>\r\n                    );\r\n                })}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Experience;\r\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport GeneralInformation from './GeneralInformation';\nimport Education from './Education';\nimport Experience from './Experience';\nimport '../styles/App.scss';\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.updateState = this.updateState.bind(this);\n\n        this.state = {\n            general: {\n                firstName: '',\n                lastName: '',\n                addressOne: '',\n                addressTwo: '',\n                city: '',\n                state: '',\n                zip: '',\n            },\n            education: {\n                schools: [\n                    {\n                        schoolName: '',\n                        schoolTitle: '',\n                        dateFrom: '',\n                        dateTo: '',\n                    },\n                ],\n            },\n            experience: {\n                companies: [\n                    {\n                        companyName: '',\n                        positionTitle: '',\n                        jobTasks: [''],\n                        dateFrom: '',\n                        dateTo: '',\n                    },\n                ],\n            },\n        };\n    }\n\n    updateState(property, data) {\n        this.setState({\n            [property]: data,\n        });\n\n        setTimeout(() => {\n            console.log(this.state);\n        }, 1000);\n    }\n    render() {\n        const { general, education, experience } = this.state;\n\n        return (\n            <section id='app'>\n                <Header />\n                <GeneralInformation updateState={this.updateState} info={general} rootName='general' />\n                <Education updateState={this.updateState} info={education} rootName='education' />\n                <Experience updateState={this.updateState} info={experience} rootName='experience' />\n            </section>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}